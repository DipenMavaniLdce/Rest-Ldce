{"version":3,"sources":["Components/ImportData/ImportExcel.js"],"names":["ImportExcel","useState","sheetData","setSheetData","lable","setLable","error","setError","loading","setLoading","response","setResponse","onFileChange","e","a","file","target","files","acceptedType","fileType","name","split","pop","indexOf","reader","FileReader","onload","data","result","Uint8Array","workbook","XLSX","read","type","console","log","SheetNames","forEach","sheetName","utils","sheet_to_json","Sheets","header","res","i","length","tempData","push","excelStudentList","readAsArrayBuffer","className","onSubmit","preventDefault","axios","post","then","msg","Success","catch","err","accept","id","onChange","htmlFor","dangerouslySetInnerHTML","__html","style","textAlign"],"mappings":"8QAoIeA,UA9HK,WAAO,IAAD,EACUC,qBADV,mBACjBC,EADiB,KACNC,EADM,OAEEF,mBAAS,qBAFX,mBAEjBG,EAFiB,KAEVC,EAFU,OAGEJ,qBAHF,mBAGjBK,EAHiB,KAGVC,EAHU,OAIMN,qBAJN,mBAIjBO,EAJiB,KAIRC,EAJQ,OAKQR,mBAAS,IALjB,mBAKjBS,EALiB,KAKPC,EALO,KAgClBC,EAAY,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,yDACfC,EAAOF,EAAEG,OAAOC,MAAM,GACpBC,EAAe,CAAC,OAAQ,MAAO,OAC/BC,EAAWJ,EAAKK,KAAKC,MAAM,KAAKC,QAClCJ,EAAaK,QAAQJ,GAAY,GAJlB,uBAKjBZ,EAAS,2BACTF,EAAS,qBACTF,IAPiB,0BAUnBI,IACAF,EAASU,EAAKK,OAEVI,EAAS,IAAIC,YAEVC,OAAS,SAAUb,GACxB,IAAIc,EAAOd,EAAEG,OAAOY,OACpBD,EAAO,IAAIE,WAAWF,GACtB,IAAIG,EAAWC,IAAKC,KAAKL,EAAM,CAAEM,KAAM,UACvCC,QAAQC,IAAIL,GACZ,IAAIF,EAAS,GACbE,EAASM,WAAWC,SAAQ,SAAUC,GACpCV,EAASG,IAAKQ,MAAMC,cAAcV,EAASW,OAAOH,GAAY,CAC5DI,OAAQ,OAMZR,QAAQC,IAAIP,GAEZ,IAAIe,EAAM,GAEVT,QAAQC,IAAIP,EAAO,IACnB,IAAK,IAAIgB,EAAI,EAAGA,EAAIhB,EAAOiB,OAAQD,IAAK,CACtC,IAAIE,EAAW,GACf,IAAK,IAAInB,KAAQC,EAAOgB,GACtBE,EAASlB,EAAO,GAAGD,IAASC,EAAOgB,GAAGjB,GAExCgB,EAAII,KAAKD,GAEX3C,EAAa,CACX6C,iBAAkBL,KAGtBnB,EAAOyB,kBAAkBlC,GA7CN,4CAAH,sDAgDlB,OACE,yBAAKmC,UAAU,aACb,0BAAMC,SA3EW,SAACtC,GAEpB,GADAA,EAAEuC,kBACGlD,EAGH,OAFAK,EAAS,wCACTJ,IAGFM,GAAW,GACX4C,IACGC,KAAK,mBAAoBpD,GACzBqD,MAAK,SAACZ,GACLT,QAAQC,IAAIQ,EAAIhB,MAChBhB,EAAY,CAAEsB,KAAM,UAAWuB,IAAKb,EAAIhB,KAAK8B,UAC7ChD,GAAW,MAEZiD,OAAM,SAACC,GACNzB,QAAQC,IAAIwB,EAAIjD,UAChBC,EAAY,CACVsB,KAAM,SACNuB,IAAKG,EAAIjD,SAASiB,MAAQ,2BAE5BlB,GAAW,QAuDX,yBAAKyC,UAAU,OACb,yBAAKA,UAAU,4BACb,yBAAKA,UAAU,eACb,2BACEjB,KAAK,OACL2B,OAAO,oBACPV,UAAU,oBACVW,GAAG,YACHC,SAAUlD,IAEZ,2BAAOsC,UAAU,oBAAoBa,QAAQ,aAC1C3D,GAEH,2BACE8C,UAAU,QACVc,wBAAyB,CAAEC,OAAQ3D,QAM3C,yBAAK4C,UAAU,+BACb,4BAAQjB,KAAK,SAASiB,UAAU,mBAAhC,YAIW,IAAZ1C,EACC,kBAAC,IAAD,MAEAE,EAAS8C,KACP,yBACEN,UAAS,sBAAiBxC,EAASuB,MACnCiC,MAAO,CAAEC,UAAW,WAEnBzD,EAAS8C","file":"static/js/13.091f060e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport XLSX from 'xlsx';\nimport axios from 'axios';\n\nimport Loading from '../../Util/Loading';\n\nconst ImportExcel = () => {\n  const [sheetData, setSheetData] = useState();\n  const [lable, setLable] = useState('Select Excel File');\n  const [error, setError] = useState();\n  const [loading, setLoading] = useState();\n  const [response, setResponse] = useState({});\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!sheetData) {\n      setError('Plese Select Excel File First!!');\n      setSheetData();\n      return;\n    }\n    setLoading(true);\n    axios\n      .post('/api/importExcel', sheetData)\n      .then((res) => {\n        console.log(res.data);\n        setResponse({ type: 'success', msg: res.data.Success });\n        setLoading(false);\n      })\n      .catch((err) => {\n        console.log(err.response);\n        setResponse({\n          type: 'danger',\n          msg: err.response.data && 'Something Went Wrong!!',\n        });\n        setLoading(false);\n      });\n  };\n\n  const onFileChange = async (e) => {\n    var file = e.target.files[0];\n    const acceptedType = ['xlsx', 'xls', 'csv'];\n    const fileType = file.name.split('.').pop();\n    if (acceptedType.indexOf(fileType) < 0) {\n      setError('Only Excel File Allow!!');\n      setLable('Select Excel File');\n      setSheetData();\n      return;\n    }\n    setError();\n    setLable(file.name);\n\n    var reader = new FileReader();\n\n    reader.onload = function (e) {\n      var data = e.target.result;\n      data = new Uint8Array(data);\n      var workbook = XLSX.read(data, { type: 'array' });\n      console.log(workbook);\n      var result = {};\n      workbook.SheetNames.forEach(function (sheetName) {\n        result = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName], {\n          header: 1,\n        });\n        //console.log(roa)\n        // if (roa.length) result[sheetName] = roa; for more sheet\n      });\n      // see the result, caution: it works after reader event is done.\n      console.log(result);\n\n      var res = [];\n\n      console.log(result[0]);\n      for (let i = 1; i < result.length; i++) {\n        let tempData = {};\n        for (let data in result[i]) {\n          tempData[result[0][data]] = result[i][data];\n        }\n        res.push(tempData);\n      }\n      setSheetData({\n        excelStudentList: res,\n      });\n    };\n    reader.readAsArrayBuffer(file);\n  };\n\n  return (\n    <div className=\"container\">\n      <form onSubmit={handleSubmit}>\n        <div className=\"row\">\n          <div className=\"col-lg-6 mt-lg-5 mx-auto\">\n            <div className=\"custom-file\">\n              <input\n                type=\"file\"\n                accept=\".xlsx, .xls, .csv\"\n                className=\"custom-file-input\"\n                id=\"excelFile\"\n                onChange={onFileChange}\n              />\n              <label className=\"custom-file-label\" htmlFor=\"excelFile\">\n                {lable}\n              </label>\n              <label\n                className=\"error\"\n                dangerouslySetInnerHTML={{ __html: error }}\n              ></label>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"form-group mt-3 text-center\">\n          <button type=\"submit\" className=\"btn btn-success\">\n            Submit\n          </button>\n        </div>\n        {loading === true ? (\n          <Loading />\n        ) : (\n          response.msg && (\n            <div\n              className={`alert alert-${response.type}`}\n              style={{ textAlign: 'center' }}\n            >\n              {response.msg}\n            </div>\n          )\n        )}\n      </form>\n    </div>\n  );\n};\n\nexport default ImportExcel;\n"],"sourceRoot":""}